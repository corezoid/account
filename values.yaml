# Default values
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
global:
  domain: "example.com"
  product: "simulator"
  env: "dev"
  serviceMonitor:
    enabled: false
  #######  PostgreSQL  ########
  db:
    secret:
      ## true - secret will be created automaticaly with provided values
      ## false - secret should be created manualy
      create: true
      ## secret name
      name: "postgresql-secret"
      data:
        dbhost: "SINGLE_ACCOUNT_DB_HOST"
        dbport: "5432"
        dbuser: "SINGLE_ACCOUNT_DB_USERNAME"
        dbpwd: "SINGLE_ACCOUNT_DB_PASSWORD"
  ## REDIS - NO CLUSTER Mode!
  redis:
    secret:
      ## true - secret will be created automatically with provided values
      ## false - secret should be created manually
      create: true
      name: "redis-secret"
      # you can specify different servers for redis for cache and PubSub  - or specify the same server in variables
      data:
        host: "REDIS_HOST"
        port: "6379"
        password: ""
  #######  RabbitMQ  ########
  mq:
    secret:
      ## true - secret will be created automatically with provided values
      ## false - secret should be created manually
      create: true
      name: "rabbitmq-secret"
      data:
        name: "name1"
        host: "RABBITMQ_HOST"
        port: "5672"
        vhost: "/conveyor"
        username: "RABBITMQ_USER"
        password: "RABBITMQ_PASSWORD"
  imageRegistry: "docker-hub.middleware.biz"
  repotype: "public"
  imageInit:
    repository: docker-hub.middleware.biz/hub.docker.com/library/alpine
    pullPolicy: IfNotPresent
    tag: "3.18"
#   imagePullSecrets:
#     name: develop-registry-secret
  deploymentStrategy:
    type: RollingUpdate
  networkPolicy:
    enabled: false
    monitoring:
      # Selector for prometheus namespace
      namespaceSelector:
        name: monitoring
      # Selector for prometheus deploymnets
      podSelector:
        release: prometheus-stack
  nameOverride: ""
  fullnameOverride: ""
  ingress:
    className: nginx
    # annotations:
    #   ingress.class: private-nginx
  account:
    enabled: false
    pullPolicy: IfNotPresent
    subDomain: "account-dev"
    port: 9080
    webhook:
      url: https://corezoid-dev.example.com/api/2/json/public/1101143/b2ff90d965623c6fd98e6cbd2751fe0648d05c55
      # tls:
      #   insecureSkipVerify: true
    secret: admin_bearer_token_secret # Must be same as admin_bearer_token_secret in single_account.config file
    persistantVolumeClaimName: "workspace-pvc"
    persistantVolumeClaimCreate: true
    persistantVolumeClaimShareDir: "account"
    corezoid_sdk:
      host: "https://corezoid-dev.example.com"
      login_id: 6746
      secret_key: "YTCuBCrO7IeVqBHOzvok1VdcTADcS7awWy2q6kyArvSNajRxA7"
    email_confirm: false
    autoscaling:
      enabled: true
      minReplicas: 1
      maxReplicas: 10
    resources:
      limits:
        cpu: 0
        memory: 500Mi
      requests:
        cpu: 100m
        memory: 200Mi
    service:
      type: ClusterIP
    frontend:
      enabled: false
      port: 80
      # Specifies whether a service account should be created
      serviceAccount:
        create: true
        # You can provide your serviceAccount name to use, also set create to false
        # name: ""
        annotations: {}
      autoscaling:
        enabled: true
        minReplicas: 2
        maxReplicas: 10
    db:
      secret:
        ## true - secret will be created automaticaly with provided values
        ## false - secret should be created manualy
        create: true
        ## secret name
        name: "postgresql-secret"
        ## for init db and roles dbsuperuser and dbuser cannot be changed (because used as plain text in sql)
        dbsuperuser: ""
        ## password - for dbsuperuser
        dbsuperuserpwd: ""
        data:
          dbhost: "SINGLE_ACCOUNT_DB_HOST"
          dbport: "5432"
          dbuser: "SINGLE_ACCOUNT_DB_USERNAME"
          dbpwd: "SINGLE_ACCOUNT_DB_PASSWORD"
    redis:
      # if internal true - create and use internal k8s redis container
      # if internal false - enable external redis, like aws elasticache (Engine Version Compatibility: 3.2.10)
      internal: false
      ## pvc name if it already exist or was created manualy
      persistantVolumeClaimName: "redis-pvc-sa"
      ## secret configuration for redis
      sentinel:
        enable: false
        master_name: "mymaster"
      secret:
        ## true - secret will be created automatically with provided values
        ## false - secret should be created manually
        create: true
        name: "redis-secret"
        # you can specify different servers for redis for cache and PubSub  - or specify the same server in variables
        data:
          host: "REDIS_HOST"
          port: "6379"
          password: ""
    affinity: {}
    # nodeAffinity:
    #   requiredDuringSchedulingIgnoredDuringExecution:
    #     nodeSelectorTerms:
    #       - matchExpressions:
    #           # - key: name
    #           #   operator: In
    #           #   values:
    #           #     - mw-dev-corezoid-2-apps
    #           - key: kubernetes.io/arch
    #             operator: In
    #             values:
    #               - arm64
    workspace:
      port: 8080
      persistantVolumeClaimName: "workspace-pvc"
      persistantVolumeClaimCreate: true
      config:
        keycloak:
          enabled: false
          url: "https://keycloak.example.com"
          realm: "master"
          client: "keycloak-sa"
          sync: false
          separator: "/"
      autoscaling:
        enabled: true
        minReplicas: 1
        maxReplicas: 10
        targetCPUUtilizationPercentage: 80
        targetMemoryUtilizationPercentage: 80
      resources:
        limits:
          memory: 800Mi
        requests:
          cpu: 200m
          memory: 400Mi
      # Specifies whether a service account should be created
      serviceAccount:
        create: false
        # You can provide your serviceAccount name to use, also set create to false
        # name: ""
        # annotations: {}
        annotations:
          ## Enable if EKS IAM for SA is used
          eks.amazonaws.com/role-arn: arn:aws:iam::123456789012:role/mw-dev-workspace-1-euw1-stripe-dev-role
    auth:
      port: 8080
      autoscaling:
        enabled: true
        minReplicas: 1
        maxReplicas: 10
        targetCPUUtilizationPercentage: 80
        targetMemoryUtilizationPercentage: 80
      resources:
        limits:
          memory: 800Mi
        requests:
          cpu: 200m
          memory: 400Mi
      # Specifies whether a service account should be created
      serviceAccount:
        create: true
        # You can provide your serviceAccount name to use, also set create to false
        # name: ""
        annotations: {}
      config:
        captcha:
          secret:
          key:
          verify_url: https://www.google.com/recaptcha/api/siteverify
          disabled: true
        auth_providers:
          saml:
            google_saml:
              enabled: false
              name: Google SAML
              icon: https://img.icons8.com/color/452/google-logo.png
              idp_metadata: /ebsmnt/conf/GoogleIDPMetadata.xml
              idp_fingerprints:
                - sha256:????
              idp_signs_envelopes: true
              idp_signs_assertions: false
              idp_signs_metadata: false
              sp_entity_id: https://account.example.com/auth/google_saml
              sp_consume_url: https://account.example.com/auth/google_saml/return
              userinfo_map:
                id: subject
                email: subject
                name:
                  - first_name
                  - last_name
          openid_connect:
            google:
              enabled: false
              name: Google
              client_id:
              client_secret:
              issuer: https://accounts.google.com
              scopes:
                - profile
                - email
              userinfo_map:
                id: sub
                photo: picture
            keycloak:
              enabled: false
              name: Keycloak
              icon: https://www.keycloak.org/resources/images/keycloak_icon_512px.svg
              client_id:
              client_secret:
              client_auth_type: basic
              issuer: https://keycloak.example.com/auth/realms/master
              scopes:
                - openid
              userinfo_map:
                id: sub
          oauth2:
            github:
              enabled: false
              name: Github
              client_id:
              client_secret:
              authorization_endpoint: https://github.com/login/oauth/authorize
              token_endpoint: https://github.com/login/oauth/access_token
              userinfo_endpoint: https://api.github.com/user
              scopes:
                - read:user
                - user:email
              userinfo_map:
                id: login
                photo: avatar_url
            facebook:
              enabled: false
              name: Facebook
              client_id:
              client_secret:
              authorization_endpoint: https://www.facebook.com/v10.0/dialog/oauth
              token_endpoint: https://graph.facebook.com/v10.0/oauth/access_token
              userinfo_endpoint: https://graph.facebook.com/v10.0/me?fields=id,name,email,picture&access_token=
              scopes:
                - public_profile
                - email
      auth_providers_keys:
        apple: ""
