# Default values
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
global:
  # second level domain only! / core domain (example: control.local)
  domain: "control.local"
  product: "simulator"
  env: "prod"
  serviceMonitor:
    enabled: false
  # Pyroscope configuration for continuous profiling
  pyroscope:
    enabled: false
  # Dashboard configuration for deploying Grafana dashboards for Account
  dashboards:
    # -- If enabled, Grafana dashboards are deployed
    enabled: false
    # -- Annotations to add to the Grafana dashboard ConfigMap
    # Note: If using with middleware observability platform, annotation should be provided to place dashboards in proper folder.
    # From observability chart, value from grafana.sidecar.dashboards.folderAnnotation is a
    # "key" for annotation, and value is a name of folder which will be created in Grafana UI for Account dashboards.
    annotations: {}
    # -- Labels to add to the Grafana dashboard ConfigMap
    # Note: If using with middleware observability platform, labels should be provided to discovery
    # dashboards and upload them to grafana. From observability chart, value from grafana.sidecar.dashboards.label is a key,
    # and grafana.sidecar.dashboards.labelValue is a value for that label.
    # So, label should look like grafana.sidecar.dashboards.label:grafana.sidecar.dashboards.labelValue
    labels: {}
  # First login password will be changed during first login.
  init_admin_password: 111
  #######  PostgreSQL  ########
  ## Supported version  from 13.5.*
  ## for RDS minimum instance - db.t3.medium / master user set "postgres"
  db:
    secret:
      ## true - secret will be created automaticaly with provided values
      ## false - secret should be created manualy
      create: true
      ## secret name
      name: "postgresql-secret"
      data:
        dbhost: "ACCOUNT_DB_HOST"   # если internal: true, тогда этот хост!!!
        dbport: "ACCOUNT_DB_PORT"
        dbuser: "ACCOUNT_DB_USERNAME"
        dbpwd: "ACCOUNT_DB_PASSWORD"

  ## NO CLUSTER Mode!
  redis:
    secret:
      ## true - secret will be created automatically with provided values
      ## false - secret should be created manually
      create: true
      name: "redis-secret"
      # you can specify different servers for redis for cache and PubSub  - or specify the same server in variables
      data:
        host: "REDIS_HOST"
        port: "6379"
        password: ""
  ###########################################
  ######## Settings for filesystems #########
  # Define global storage class: efs / nfs / manual
  storage: efs
  # Define global storageClass name
  storageClassName: "mw-dev-corezoid-2-apps"
  persistantVolumeClaimCreate: true
  ######## Settings AWS EFS filesystem   ########
  efs:
    awsRegion: "eu-west-1"
    efsFileSystemId: "fs-008b821530094cd91"
    ## set true if you choose storage: efs
    enabled: true
  ######## Settings NFS filesystem   ########
  nfs:
    ## set true if you choose storage: nfs
    enabled: false
  imageRegistry: "hub.corezoid.com"
  repotype: "public"
  imageInit:
    repository: hub.corezoid.com/hub.docker.com/library/alpine
    pullPolicy: IfNotPresent
    tag: "3.21"
  # imagePullSecrets:
  #   name: registry-secret
  deploymentStrategy:
    type: RollingUpdate
  networkPolicy:
    enabled: false
    monitoring:
      # Selector for prometheus namespace
      namespaceSelector:
        name: monitoring
      # Selector for prometheus deploymnets
      podSelector:
        release: prometheus-stack
  nameOverride: ""
  fullnameOverride: ""
  ingress:
    className: public-nginx
    # annotations:
    #   ingress.class: public-nginx
  http:
    tune:
      consumer_response_prefetch_size_per_channel: 50
  account:
    enabled: true
    type: in_house
    pullPolicy: IfNotPresent
    subDomain: "account.dev"
    port: 9080
    persistantVolumeClaimName: "workspace-pvc"
    persistantVolumeClaimCreate: true
    persistantVolumeClaimShareDir: "avatars"
    content_security_policy:
      urls:
        # - https://doc.corezoid.com
    email_confirm: true
    autoscaling:
      enabled: true
      minReplicas: 1
      maxReplicas: 10
    resources: {}
    # resources:
    #   limits:
    #     cpu: 0
    #     memory: 500Mi
    #   requests:
    #     cpu: 100m
    #     memory: 200Mi
    service:
      type: ClusterIP
    frontend:
      enabled: true
      port: 80
      ## @param .Values.global.account.frontend.verify_signature Enable image signature verification
      verify_signature: false
      ## @param .Values.global.account.frontend.cosign_secret_name Name of the secret containing cosign public key
      cosign_secret_name: "cosign-keys"
      # Specifies whether a service account should be created
      serviceAccount:
        create: false
        # You can provide your serviceAccount name to use, also set create to false
        # name: ""
        annotations: {}
      autoscaling:
        enabled: true
        minReplicas: 1
        maxReplicas: 10
        targetCPUUtilizationPercentage: 60
    db:
      secret:
        ## true - secret will be created automaticaly with provided values
        ## false - secret should be created manualy
        create: true
        ## secret name
        name: "postgresql-secret"
        ## for init db and roles dbsuperuser and dbuser cannot be changed (because used as plain text in sql)
        dbsuperuser: ""
        ## password - for dbsuperuser
        dbsuperuserpwd: ""
        data:
          dbhost: "ACCOUNT_DB_HOST" # если internal: true, тогда этот хост!!!
          dbport: "ACCOUNT_DB_PORT"
          dbuser: "ACCOUNT_DB_USERNAME"
          dbpwd: "ACCOUNT_DB_PASSWORD"
    redis:
      # if internal true - create and use internal k8s redis container
      # if internal false - enable external redis, like aws elasticache (Engine Version Compatibility: 3.2.10)
      internal: false
      ## pvc name if it already exist or was created manualy
      persistantVolumeClaimName: "redis-pvc-sa"
      ## secret configuration for redis
      sentinel:
        enable: false
        master_name: "mymaster"
      secret:
        ## true - secret will be created automatically with provided values
        ## false - secret should be created manually
        create: true
        name: "redis-secret"
        # you can specify different servers for redis for cache and PubSub  - or specify the same server in variables
        data:
          host: "REDIS_HOST"
          port: "6379"
          password: ""
    ## @param global.account.valkey.use Enable ValKey single-node deployment
    ## @param global.account.valkey.resources.limits.memory Maximum memory limit for ValKey pod
    ## @param global.account.valkey.resources.requests.cpu Minimum CPU request for ValKey pod
    ## @param global.account.valkey.resources.requests.memory Minimum memory request for ValKey pod
    ## @param global.account.valkey.secret.data.password Password for ValKey authentication
    valkey:
      use: false
      resources:
        limits:
          memory: 200Mi
        requests:
          cpu: 50m
          memory: 100Mi
      secret:
        data:
          password: ""
    config:
      webhook:
        url: https://pre.corezoid.com/api/2/json/public/1101143/b2ff90d965623c6fd98e6cbd2751fe0648d05c55
        # tls:
        #   insecure_skip_verify: true
      # Must be same as admin_bearer_token_secret in single_account.config file
      secret: 222222222222222
      admin_user:
        login: admin@corezoid.loc
        password: 222222222222222
      access_token_expire_time: 100
      logging:
        level: debug
      login_pass_auth:
        password_salt: 222222222222222
        password_salt_algorithm: sha
      email_confirm: true
      # single_auth_provider_mode: apple
      resource_dir: /avatars
      captcha:
        secret: 222222222222222
        key: 222222222222222
        verify_url: https://www.google.com/recaptcha/api/siteverify
        disabled: true
      forbidden_domains_re:
        - ^example\.com$
        - ^yandex\.*$
        - \.by$
        - \.ru$
        - \.su$
        # - ^gmail\.com$
      auth_url: http://account-auth-service:8080
      single_account_disabled: true
      # keycloak:
      #   url: "https://keycloak.dev.corezoid.com"
      #   realm: "master"
      #   client: "dev-sa"
      #   sync: true
      #   separator: "/"
      # auth_providers:
      #   saml:
      #     azure_saml:
      #       enabled: false
      #       name: Azure SAML
      #       icon: https://aadcdn.msauth.net/shared/1.0/content/images/favicon_a_eupayfgghqiai7k9sol6lg2.ico
      #       idp_metadata: https://login.microsoftonline.com/875b8ebc-11a0-419f-a6a3-cbb7bae2222f/federationmetadata/2007-06/federationmetadata.xml?appid=1dd17d8d-a978-412b-8976-fa922091e8
      #       idp_signs_metadata: false
      #       userinfo_map:
      #         login: http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name
      #         email: http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name
      #         name: http://schemas.microsoft.com/identity/claims/displayname
      #   openid_connect:
      #     google:
      #       enabled: false
      #       name: Google
      #       client_id: 222222222222222
      #       client_secret: 222222222222222
      #       issuer: https://accounts.google.com
      #       scopes:
      #         - profile
      #         - email
      #       userinfo_map:
      #         login: sub
      #         photo: picture
      #     apple:
      #       enabled: false
      #       name: Apple
      #       client_id: com.corezoid.apple.signin
      #       client_auth_type: jwt
      #       client_auth_jwt:
      #         header:
      #           kid: 222222222222222
      #         expire: 60
      #         claims:
      #           iss: 222222222222222
      #           aud: https://appleid.apple.com
      #           sub: com.corezoid.apple.signin
      #         sign_key_file: "${AUTH_APPLE_SECRET_PATH}"
      #       issuer: https://appleid.apple.com
      #       scopes:
      #         - email
      #         - name
      #       userinfo_source: id_token
      #       url_extension:
      #         response_mode: form_post
      #       userinfo_map:
      #         login: sub
      #     keycloak:
      #       enabled: false
      #       name: Keycloak
      #       icon: https://www.keycloak.org/resources/images/logo.svg
      #       client_id: dev-sa
      #       client_secret: 222222222222222
      #       client_auth_type: basic
      #       issuer: https://keycloak.dev.corezoid.com/auth/realms/master
      #       scopes:
      #         - openid
      #       userinfo_map:
      #         login: sub
      #     microsoft_online:
      #       enabled: false
      #       name: Microsoft MT Online
      #       icon: https://aadcdn.msauth.net/shared/1.0/content/images/favicon_a_eupayfgghqiai7k9sol6lg2.ico
      #       client_id: 222222222222222
      #       client_secret: 222222222222222
      #       client_auth_type: basic
      #       issuer: https://login.microsoftonline.com/875b8ebc-11a0-419f-a6a3-cbb7bae2222f/v2.0
      #       scopes:
      #         - openid
      #       userinfo_map:
      #         login: sub
      #   oauth2:
      #     cloud_account:
      #       enabled: false
      #       name: Cloud Account
      #       client_id: 222222222222222
      #       client_secret: 222222222222222
      #       authorization_endpoint: https://account.pre.corezoid.com/oauth2/authorize
      #       token_endpoint: https://account.pre.corezoid.com/oauth2/token
      #       userinfo_endpoint: https://account.pre.corezoid.com/oauth2/userinfo
      #       scopes:
      #         - single_account:account.read
      #       userinfo_map:
      #         login: login
      #         photo: user_photo
      #         email: login
      #     github:
      #       enabled: false
      #       name: Github
      #       client_id: 222222222222222
      #       client_secret: 222222222222222
      #       authorization_endpoint: https://github.com/login/oauth/authorize
      #       token_endpoint: https://github.com/login/oauth/access_token
      #       userinfo_endpoint: https://api.github.com/user
      #       scopes:
      #         - read:user
      #         - user:email
      #       userinfo_map:
      #         login: login
      #         email: dddd
      #         photo: avatar_url
      #     facebook:
      #       enabled: false
      #       name: Facebook
      #       client_id: 222222222222222
      #       client_secret: 222222222222222
      #       authorization_endpoint: https://www.facebook.com/v10.0/dialog/oauth
      #       token_endpoint: https://graph.facebook.com/v10.0/oauth/access_token
      #       userinfo_endpoint: https://graph.facebook.com/v10.0/me?fields=id,name,email,picture&access_token=
      #       scopes:
      #         - public_profile
      #         - email
      #       userinfo_map:
      #         login: id
      #         photo: picture
    affinity: {}
    # nodeAffinity:
    #   requiredDuringSchedulingIgnoredDuringExecution:
    #     nodeSelectorTerms:
    #       - matchExpressions:
    #           # - key: name
    #           #   operator: In
    #           #   values:
    #           #     - mw-dev-corezoid-2-apps
    #           - key: kubernetes.io/arch
    #             operator: In
    #             values:
    #               - arm64
    tolerations: {}
    workspace:
      port: 8080
      ##  @param .Values.global.account.workspace.portMetrics Define port for metrics, default - 9100.
      ## Will set in config file if .Values.global.serviceMonitor.enable set true
      portMetrics: 9100
      persistantVolumeClaimName: "workspace-pvc"
      persistantVolumeClaimCreate: true
      ## @param .Values.global.account.workspace.verify_signature Enable image signature verification
      verify_signature: false
      ## @param .Values.global.account.workspace.cosign_secret_name Name of the secret containing cosign public key
      cosign_secret_name: "cosign-keys"
      autoscaling:
        enabled: true
        minReplicas: 1
        maxReplicas: 10
        targetCPUUtilizationPercentage: 80
        targetMemoryUtilizationPercentage: 80
      resources: {}
      # resources:
      #   limits:
      #     memory: 800Mi
      #   requests:
      #     cpu: 200m
      #     memory: 400Mi
      # Specifies whether a service account should be created
      serviceAccount:
        create: false
        # You can provide your serviceAccount name to use, also set create to false
        # name: ""
        annotations: {}
    auth:
      port: 8080
      ##  @param .Values.global.account.auth.portMetrics Define port for metrics, default - 9100.
      ## Will set in config file if .Values.global.serviceMonitor.enable set true
      portMetrics: 9100
      ## @param .Values.global.account.auth.verify_signature Enable image signature verification
      verify_signature: false
      ## @param .Values.global.account.auth.cosign_secret_name Name of the secret containing cosign public key
      cosign_secret_name: "cosign-keys"
      autoscaling:
        enabled: true
        minReplicas: 2
        maxReplicas: 10
        targetCPUUtilizationPercentage: 80
        targetMemoryUtilizationPercentage: 80
      resources: {}
      # resources:
      #   limits:
      #     memory: 800Mi
      #   requests:
      #     cpu: 100m
      #     memory: 400Mi
      # Specifies whether a service account should be created
      serviceAccount:
        create: false
        # You can provide your serviceAccount name to use, also set create to false
        # name: ""
        annotations: {}
      # Additional custom labels
      # customLabels:
      #   environment: production
      #   team: authentication
      #   costCenter: cc123

      # auth_providers_keys:
        # apple: "-----BEGIN PRIVATE KEY-----\nMSI1GTAgEAMBMGByqGS\n-----END PRIVATE KEY-----"
